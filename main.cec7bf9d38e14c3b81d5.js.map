{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACPF,EAAQF,GACRG,EAAO,gBAKbE,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCdXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAId,SAAQ,SAACC,EAASC,GAIzBD,EAHqBY,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,MAGjEd,EAAO,aAITE,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpBnC,IAIMe,EAAkB,SAACC,GACrB,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GACzB,IAN2BmB,EAAKC,EAM1BxB,GANqBuB,EAMa,IANRC,EAMa,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAO9ClB,YAAW,WACYoB,KAAKE,SAAW,GAG/BxB,EAAQmB,EAAYM,GAAI5B,GAExBI,EAAOkB,EAAYM,MAExB5B,OAIL6B,EAAa,SAACD,EAAIrB,GACtBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIuB,EAAW,SAAAF,GACfpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAGFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,K","file":"main.cec7bf9d38e14c3b81d5.js","sourcesContent":["const delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(ms);\n            reject(`error`)\n        })\n    })\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers);\n        reject(`error`)\n    });  \n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n        const delay = randomIntegerFromInterval(200, 500);\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve(transaction.id, delay);\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}